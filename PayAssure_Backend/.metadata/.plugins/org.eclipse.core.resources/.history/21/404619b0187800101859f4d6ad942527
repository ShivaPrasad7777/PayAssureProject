package training.iqgateway.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import training.iqgateway.dto.LoginRequest;
import training.iqgateway.dto.LoginResponse;
import training.iqgateway.entity.Customer;
import training.iqgateway.entity.Insurer;
import training.iqgateway.repository.CustomerRepository;
import training.iqgateway.service.LoginService;

import java.util.Date;

import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
@WebMvcTest(LoginController.class)
public class LoginControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private LoginService loginService;

    @MockBean
    private CustomerRepository customerRepository; // To satisfy constructor injection

    @MockBean
    private OtpService otpService; // âœ… To satisfy @Autowired field in controller

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void testLogin_AsInsurer_ShouldReturnOk() throws Exception {
        Insurer insurer = new Insurer();
        insurer.setId("insurer123");
        insurer.setName("Insurer User");
        insurer.setEmail("insurer@example.com");
        insurer.setRole("insurer");
        insurer.setCreatedAt(new Date());

        LoginRequest request = new LoginRequest("insurer@example.com", "password");
        Mockito.when(loginService.authenticate(request.getEmail(), request.getPassword()))
               .thenReturn(insurer);

        mockMvc.perform(post("/api/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", is(insurer.getId())))
                .andExpect(jsonPath("$.name", is(insurer.getName())))
                .andExpect(jsonPath("$.email", is(insurer.getEmail())))
                .andExpect(jsonPath("$.role", is(insurer.getRole())));
    }

    @Test
    public void testLogin_AsCustomer_ShouldReturnOk() throws Exception {
        Customer customer = new Customer();
        customer.setId("customer123");
        customer.setName("Customer User");
        customer.setEmail("customer@example.com");
        customer.setCreatedAt(new Date());

        LoginRequest request = new LoginRequest("customer@example.com", "password");
        Mockito.when(loginService.authenticate(request.getEmail(), request.getPassword()))
               .thenReturn(customer);

        mockMvc.perform(post("/api/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", is(customer.getId())))
                .andExpect(jsonPath("$.name", is(customer.getName())))
                .andExpect(jsonPath("$.email", is(customer.getEmail())))
                .andExpect(jsonPath("$.role", is("customer")));
    }

    @Test
    public void testLogin_InvalidUser_ShouldReturnUnauthorized() throws Exception {
        LoginRequest request = new LoginRequest("unknown@example.com", "wrongpassword");
        Mockito.when(loginService.authenticate(request.getEmail(), request.getPassword()))
               .thenReturn(null);

        mockMvc.perform(post("/api/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isUnauthorized());
    }

    @Test
    public void testLogin_UnknownUserType_ShouldReturnUnauthorized() throws Exception {
        Object unknownUser = new Object();

        LoginRequest request = new LoginRequest("email@example.com", "password");
        Mockito.when(loginService.authenticate(request.getEmail(), request.getPassword()))
               .thenReturn(unknownUser);

        mockMvc.perform(post("/api/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isUnauthorized());
    }
}
